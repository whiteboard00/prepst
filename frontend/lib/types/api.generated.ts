/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign Up
         * @description Register a new user.
         *
         *     Args:
         *         signup_data: Email and password
         *         db: Supabase client
         *
         *     Returns:
         *         User and session data
         */
        post: operations["sign_up_api_auth_signup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign In
         * @description Sign in an existing user.
         *
         *     Args:
         *         signin_data: Email and password
         *         db: Supabase client
         *
         *     Returns:
         *         User and session data with tokens
         */
        post: operations["sign_in_api_auth_signin_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign Out
         * @description Sign out the current user.
         *
         *     Args:
         *         user_id: Current user ID from auth token
         *         db: Supabase client
         *
         *     Returns:
         *         Success message
         */
        post: operations["sign_out_api_auth_signout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Info
         * @description Get current user information.
         *
         *     Args:
         *         user_id: Current user ID from auth token
         *         db: Supabase client
         *
         *     Returns:
         *         User profile data
         */
        get: operations["get_current_user_info_api_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/study-plans/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Study Plan
         * @description Generate a new study plan for a user.
         *
         *     Args:
         *         plan_data: Study plan creation data (scores, test date)
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Generated study plan with sessions
         */
        post: operations["generate_study_plan_api_study_plans_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/study-plans/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Study Plan
         * @description Get the active study plan for the current user.
         *
         *     Args:
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Active study plan with all sessions and topics
         */
        get: operations["get_study_plan_api_study_plans_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/study-plans/sessions/{session_id}/questions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Session Questions
         * @description Get all questions for a specific practice session.
         *
         *     Args:
         *         session_id: Practice session ID
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Session questions with full question details
         */
        get: operations["get_session_questions_api_study_plans_sessions__session_id__questions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/study-plans/sessions/{session_id}/questions/{question_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Submit Answer
         * @description Submit an answer for a question in a practice session.
         *
         *     Args:
         *         session_id: Practice session ID
         *         question_id: Question ID
         *         answer_data: User's answer and status
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Answer correctness and correct answer
         */
        patch: operations["submit_answer_api_study_plans_sessions__session_id__questions__question_id__patch"];
        trace?: never;
    };
    "/api/study-plans/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Categories And Topics
         * @description Get all categories and topics for reference.
         *
         *     Returns:
         *         Categories and topics grouped by section
         */
        get: operations["get_categories_and_topics_api_study_plans__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Mock Exam
         * @description Create a new mock SAT exam with 4 modules.
         *
         *     Args:
         *         request: Exam creation request with exam type
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Created exam with modules
         */
        post: operations["create_mock_exam_api_mock_exams_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Mock Exams
         * @description Get all mock exams for the current user.
         *
         *     Args:
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         List of user's mock exams
         */
        get: operations["list_mock_exams_api_mock_exams__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/{exam_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Mock Exam
         * @description Get a specific mock exam with all modules.
         *
         *     Args:
         *         exam_id: Mock exam ID
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Exam with all modules
         */
        get: operations["get_mock_exam_api_mock_exams__exam_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/{exam_id}/modules/{module_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Module
         * @description Start a module, setting its status and start time.
         *
         *     Args:
         *         exam_id: Mock exam ID
         *         module_id: Module ID to start
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Updated module
         */
        post: operations["start_module_api_mock_exams__exam_id__modules__module_id__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/{exam_id}/modules/{module_id}/questions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Module Questions
         * @description Get all questions for a specific module.
         *
         *     Args:
         *         exam_id: Mock exam ID
         *         module_id: Module ID
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Module with questions
         */
        get: operations["get_module_questions_api_mock_exams__exam_id__modules__module_id__questions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/{exam_id}/modules/{module_id}/questions/{question_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Submit Answer
         * @description Submit an answer for a question in a module.
         *
         *     Args:
         *         exam_id: Mock exam ID
         *         module_id: Module ID
         *         question_id: Question ID
         *         answer_data: User's answer and status
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Answer correctness and correct answer
         */
        patch: operations["submit_answer_api_mock_exams__exam_id__modules__module_id__questions__question_id__patch"];
        trace?: never;
    };
    "/api/mock-exams/{exam_id}/modules/{module_id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete Module
         * @description Complete a module and calculate score. Generates adaptive questions for next module.
         *
         *     Args:
         *         exam_id: Mock exam ID
         *         module_id: Module ID
         *         request: Completion data with time remaining
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Completed module with score
         */
        post: operations["complete_module_api_mock_exams__exam_id__modules__module_id__complete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/{exam_id}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Exam Results
         * @description Get comprehensive results for a completed exam.
         *
         *     Args:
         *         exam_id: Mock exam ID
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Exam results with detailed breakdown
         */
        get: operations["get_exam_results_api_mock_exams__exam_id__results_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * CategoriesAndTopicsResponse
         * @description Response model for categories and topics
         */
        CategoriesAndTopicsResponse: {
            /** Math */
            math: Record<string, never>;
            /** Reading Writing */
            reading_writing: Record<string, never>;
        };
        /** CategoryPerformance */
        CategoryPerformance: {
            /** Category Name */
            category_name: string;
            /** Section */
            section: string;
            /** Total Questions */
            total_questions: number;
            /** Correct Answers */
            correct_answers: number;
            /** Percentage */
            percentage: number;
        };
        /** CompleteModuleRequest */
        CompleteModuleRequest: {
            /** Time Remaining Seconds */
            time_remaining_seconds?: number | null;
        };
        /** CreateMockExamRequest */
        CreateMockExamRequest: {
            /**
             * Exam Type
             * @default full_length
             * @enum {string}
             */
            exam_type: "full_length" | "section_only";
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** MockExam */
        MockExam: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            /** Exam Type */
            exam_type: string;
            status: components["schemas"]["MockExamStatus"];
            /** Started At */
            started_at?: string | null;
            /** Completed At */
            completed_at?: string | null;
            /** Total Score */
            total_score?: number | null;
            /** Math Score */
            math_score?: number | null;
            /** Rw Score */
            rw_score?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** MockExamListItem */
        MockExamListItem: {
            /** Id */
            id: string;
            /** Exam Type */
            exam_type: string;
            status: components["schemas"]["MockExamStatus"];
            /** Started At */
            started_at?: string | null;
            /** Completed At */
            completed_at?: string | null;
            /** Total Score */
            total_score?: number | null;
            /** Math Score */
            math_score?: number | null;
            /** Rw Score */
            rw_score?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** MockExamListResponse */
        MockExamListResponse: {
            /** Exams */
            exams: components["schemas"]["MockExamListItem"][];
            /** Total Count */
            total_count: number;
        };
        /** MockExamModule */
        MockExamModule: {
            /** Id */
            id: string;
            /** Exam Id */
            exam_id: string;
            module_type: components["schemas"]["ModuleType"];
            /** Module Number */
            module_number: number;
            /**
             * Time Limit Minutes
             * @default 32
             */
            time_limit_minutes: number;
            status: components["schemas"]["ModuleStatus"];
            /** Started At */
            started_at?: string | null;
            /** Completed At */
            completed_at?: string | null;
            /** Time Remaining Seconds */
            time_remaining_seconds?: number | null;
            /** Raw Score */
            raw_score?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** MockExamQuestionWithDetails */
        MockExamQuestionWithDetails: {
            /** Mock Question Id */
            mock_question_id: string;
            /** Question */
            question: Record<string, never>;
            /** Topic */
            topic: Record<string, never>;
            /** Display Order */
            display_order: number;
            status: components["schemas"]["MockQuestionStatus"];
            /** User Answer */
            user_answer?: string[] | null;
            /** Is Correct */
            is_correct?: boolean | null;
            /**
             * Is Marked For Review
             * @default false
             */
            is_marked_for_review: boolean;
            /** Answered At */
            answered_at?: string | null;
        };
        /** MockExamResponse */
        MockExamResponse: {
            exam: components["schemas"]["MockExam"];
            /** Modules */
            modules: components["schemas"]["MockExamModule"][];
        };
        /** MockExamResultsResponse */
        MockExamResultsResponse: {
            exam: components["schemas"]["MockExam"];
            /** Modules */
            modules: components["schemas"]["ModuleResultDetail"][];
            /** Category Performance */
            category_performance: components["schemas"]["CategoryPerformance"][];
            /** Total Questions */
            total_questions: number;
            /** Total Correct */
            total_correct: number;
            /** Overall Percentage */
            overall_percentage: number;
        };
        /**
         * MockExamStatus
         * @enum {string}
         */
        MockExamStatus: "not_started" | "in_progress" | "completed" | "abandoned";
        /**
         * MockQuestionStatus
         * @enum {string}
         */
        MockQuestionStatus: "not_started" | "in_progress" | "answered" | "marked_for_review";
        /** ModuleQuestionsResponse */
        ModuleQuestionsResponse: {
            module: components["schemas"]["MockExamModule"];
            /** Questions */
            questions: components["schemas"]["MockExamQuestionWithDetails"][];
            /** Total Questions */
            total_questions: number;
        };
        /** ModuleResultDetail */
        ModuleResultDetail: {
            module_type: components["schemas"]["ModuleType"];
            /** Module Number */
            module_number: number;
            /** Raw Score */
            raw_score: number;
            /** Total Questions */
            total_questions: number;
            /** Correct Count */
            correct_count: number;
            /** Questions */
            questions: components["schemas"]["QuestionResultDetail"][];
        };
        /**
         * ModuleStatus
         * @enum {string}
         */
        ModuleStatus: "not_started" | "in_progress" | "completed";
        /**
         * ModuleType
         * @enum {string}
         */
        ModuleType: "math_module_1" | "math_module_2" | "rw_module_1" | "rw_module_2";
        /**
         * PracticeSession
         * @description Practice session model
         */
        PracticeSession: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Study Plan Id
             * Format: uuid
             */
            study_plan_id: string;
            /**
             * Scheduled Date
             * Format: date
             */
            scheduled_date: string;
            /** Session Number */
            session_number: number;
            /** Status */
            status: string;
            /** Started At */
            started_at?: string | null;
            /** Completed At */
            completed_at?: string | null;
            /** Created At */
            created_at?: string | null;
            /** Updated At */
            updated_at?: string | null;
            /**
             * Topics
             * @default []
             */
            topics: components["schemas"]["SessionTopic"][];
        };
        /**
         * Question
         * @description Question model
         */
        Question: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Stem */
            stem: string;
            /** Difficulty */
            difficulty: string;
            /** Question Type */
            question_type: string;
            /** Answer Options */
            answer_options?: Record<string, never> | unknown[] | null;
            /** Correct Answer */
            correct_answer?: string[] | null;
            /** Acceptable Answers */
            acceptable_answers?: Record<string, never> | unknown[] | null;
            /** Rationale */
            rationale?: string | null;
            /** Difficulty Score */
            difficulty_score?: number | null;
            /** Module */
            module?: string | null;
            /** Topic Id */
            topic_id?: string | null;
            /** External Id */
            external_id?: string | null;
            /** Source Uid */
            source_uid?: string | null;
            /** Is Active */
            is_active?: boolean | null;
            /** Created At */
            created_at?: string | null;
            /** Updated At */
            updated_at?: string | null;
        };
        /** QuestionResultDetail */
        QuestionResultDetail: {
            /** Question Id */
            question_id: string;
            /** Topic Name */
            topic_name: string;
            /** Category Name */
            category_name: string;
            /** Difficulty */
            difficulty: string;
            /** Is Correct */
            is_correct: boolean | null;
            /** User Answer */
            user_answer: string[] | null;
            /** Correct Answer */
            correct_answer: string[];
            /** Question Type */
            question_type: string;
        };
        /**
         * SessionQuestion
         * @description Session question with details
         */
        SessionQuestion: {
            /**
             * Session Question Id
             * Format: uuid
             */
            session_question_id: string;
            question: components["schemas"]["Question"];
            topic: components["schemas"]["Topic"];
            /** Status */
            status: string;
            /** Display Order */
            display_order: number;
            /** User Answer */
            user_answer?: string[] | null;
            /** Started At */
            started_at?: string | null;
            /** Answered At */
            answered_at?: string | null;
        };
        /**
         * SessionQuestionsResponse
         * @description Response model for session questions
         */
        SessionQuestionsResponse: {
            session: components["schemas"]["PracticeSession"];
            /** Questions */
            questions: components["schemas"]["SessionQuestion"][];
            /** Total Questions */
            total_questions: number;
        };
        /**
         * SessionTopic
         * @description Session topic with question count
         */
        SessionTopic: {
            /**
             * Topic Id
             * Format: uuid
             */
            topic_id: string;
            /** Topic Name */
            topic_name: string;
            /** Num Questions */
            num_questions: number;
        };
        /** SignInRequest */
        SignInRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /** SignUpRequest */
        SignUpRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /**
         * StudyPlan
         * @description Complete study plan model
         */
        StudyPlan: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /**
             * Start Date
             * Format: date
             */
            start_date: string;
            /**
             * Test Date
             * Format: date
             */
            test_date: string;
            /** Current Math Score */
            current_math_score: number;
            /** Target Math Score */
            target_math_score: number;
            /** Current Rw Score */
            current_rw_score: number;
            /** Target Rw Score */
            target_rw_score: number;
            /** Is Active */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
            /**
             * Sessions
             * @default []
             */
            sessions: components["schemas"]["PracticeSession"][];
        };
        /**
         * StudyPlanCreate
         * @description Request model for creating a study plan
         * @example {
         *       "current_math_score": 500,
         *       "current_rw_score": 520,
         *       "target_math_score": 700,
         *       "target_rw_score": 680,
         *       "test_date": "2025-05-01"
         *     }
         */
        StudyPlanCreate: {
            /**
             * Current Math Score
             * @description Current Math score (200-800)
             */
            current_math_score: number;
            /**
             * Target Math Score
             * @description Target Math score (200-800)
             */
            target_math_score: number;
            /**
             * Current Rw Score
             * @description Current Reading/Writing score (200-800)
             */
            current_rw_score: number;
            /**
             * Target Rw Score
             * @description Target Reading/Writing score (200-800)
             */
            target_rw_score: number;
            /**
             * Test Date
             * Format: date
             * @description SAT test date
             */
            test_date: string;
        };
        /**
         * StudyPlanResponse
         * @description Response model for study plan
         */
        StudyPlanResponse: {
            study_plan: components["schemas"]["StudyPlan"];
            /** Total Sessions */
            total_sessions: number;
            /** Total Days */
            total_days: number;
            /** Sessions Per Day */
            sessions_per_day: number;
        };
        /** SubmitAnswerRequest */
        SubmitAnswerRequest: {
            /** User Answer */
            user_answer: string[];
            /**
             * Status
             * @default answered
             */
            status: string;
        };
        /**
         * SubmitAnswerResponse
         * @description Shared response model for submitting an answer
         */
        SubmitAnswerResponse: {
            /** Is Correct */
            is_correct: boolean;
            /** Correct Answer */
            correct_answer: string[];
            /** Question Id */
            question_id: string;
            /** Junction Question Id */
            junction_question_id: string;
        };
        /** SubmitModuleAnswerRequest */
        SubmitModuleAnswerRequest: {
            /** User Answer */
            user_answer: string[];
            /** @default answered */
            status: components["schemas"]["MockQuestionStatus"];
            /**
             * Is Marked For Review
             * @default false
             */
            is_marked_for_review: boolean;
        };
        /**
         * Topic
         * @description Topic model
         */
        Topic: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Category Id
             * Format: uuid
             */
            category_id: string;
            /** Weight In Category */
            weight_in_category: number;
            /** Created At */
            created_at?: string | null;
            /** Updated At */
            updated_at?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    sign_up_api_auth_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sign_in_api_auth_signin_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sign_out_api_auth_signout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_current_user_info_api_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    generate_study_plan_api_study_plans_generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StudyPlanCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudyPlanResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_study_plan_api_study_plans_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudyPlanResponse"];
                };
            };
        };
    };
    get_session_questions_api_study_plans_sessions__session_id__questions_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionQuestionsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_answer_api_study_plans_sessions__session_id__questions__question_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                question_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmitAnswerRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmitAnswerResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_categories_and_topics_api_study_plans__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriesAndTopicsResponse"];
                };
            };
        };
    };
    create_mock_exam_api_mock_exams_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMockExamRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MockExamResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_mock_exams_api_mock_exams__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MockExamListResponse"];
                };
            };
        };
    };
    get_mock_exam_api_mock_exams__exam_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MockExamResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_module_api_mock_exams__exam_id__modules__module_id__start_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
                module_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_module_questions_api_mock_exams__exam_id__modules__module_id__questions_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
                module_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModuleQuestionsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_answer_api_mock_exams__exam_id__modules__module_id__questions__question_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
                module_id: string;
                question_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmitModuleAnswerRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmitAnswerResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    complete_module_api_mock_exams__exam_id__modules__module_id__complete_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
                module_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompleteModuleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_exam_results_api_mock_exams__exam_id__results_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MockExamResultsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
