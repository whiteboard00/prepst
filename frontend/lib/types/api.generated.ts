/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign Up
         * @description Register a new user.
         *
         *     Args:
         *         signup_data: Email and password
         *         db: Supabase client
         *
         *     Returns:
         *         User and session data
         */
        post: operations["sign_up_api_auth_signup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign In
         * @description Sign in an existing user.
         *
         *     Args:
         *         signin_data: Email and password
         *         db: Supabase client
         *
         *     Returns:
         *         User and session data with tokens
         */
        post: operations["sign_in_api_auth_signin_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign Out
         * @description Sign out the current user.
         *
         *     Args:
         *         user_id: Current user ID from auth token
         *         db: Supabase client
         *
         *     Returns:
         *         Success message
         */
        post: operations["sign_out_api_auth_signout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Info
         * @description Get current user information.
         *
         *     Args:
         *         user_id: Current user ID from auth token
         *         db: Supabase client
         *
         *     Returns:
         *         User profile data
         */
        get: operations["get_current_user_info_api_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/study-plans/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Study Plan
         * @description Generate a new study plan for a user.
         *
         *     Args:
         *         plan_data: Study plan creation data (scores, test date)
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Generated study plan with sessions
         */
        post: operations["generate_study_plan_api_study_plans_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/study-plans/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Study Plan
         * @description Get the active study plan for the current user.
         *
         *     Args:
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Active study plan with all sessions and topics
         */
        get: operations["get_study_plan_api_study_plans_me_get"];
        put?: never;
        post?: never;
        /**
         * Delete Study Plan
         * @description Delete the active study plan for the current user.
         *
         *     Args:
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         No content on success
         */
        delete: operations["delete_study_plan_api_study_plans_me_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/study-plans/me/generate-batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Next Batch
         * @description Generate next 14-day batch of sessions for the active study plan.
         *
         *     This uses CURRENT mastery data to focus on high-priority topics.
         *     Useful to call after:
         *     - Completing a mock exam
         *     - Every 2 weeks of practice
         *     - When buffer of pending sessions is low
         *
         *     Args:
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Batch generation result with created sessions info
         */
        post: operations["generate_next_batch_api_study_plans_me_generate_batch_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/study-plans/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Categories And Topics
         * @description Get all categories and topics for reference.
         *
         *     Returns:
         *         Categories and topics grouped by section
         */
        get: operations["get_categories_and_topics_api_study_plans__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/practice-sessions/{session_id}/questions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Session Questions
         * @description Get all questions for a specific practice session.
         *
         *     Args:
         *         session_id: Practice session ID
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Session questions with full question details
         */
        get: operations["get_session_questions_api_practice_sessions__session_id__questions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/practice-sessions/{session_id}/questions/{question_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Submit Answer
         * @description Submit an answer for a question in a practice session.
         *
         *     Args:
         *         session_id: Practice session ID
         *         question_id: Question ID
         *         answer_data: User's answer and status
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Answer correctness and correct answer
         */
        patch: operations["submit_answer_api_practice_sessions__session_id__questions__question_id__patch"];
        trace?: never;
    };
    "/api/practice-sessions/{session_id}/questions/{question_id}/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Question Feedback
         * @description Get or generate AI feedback for a specific question.
         *
         *     Args:
         *         session_id: Practice session ID
         *         question_id: Question ID
         *         regenerate: Force regeneration even if cached (default: False)
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         AI-generated feedback for the question
         */
        get: operations["get_question_feedback_api_practice_sessions__session_id__questions__question_id__feedback_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/practice-sessions/{session_id}/generate-feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Session Feedback
         * @description Generate AI feedback for all or selected questions in a session (batch).
         *
         *     Args:
         *         session_id: Practice session ID
         *         request: Feedback request with optional question IDs
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         List of AI-generated feedback for questions
         */
        post: operations["generate_session_feedback_api_practice_sessions__session_id__generate_feedback_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/practice-sessions/{session_id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete Session
         * @description Mark session as complete and create performance snapshot.
         *
         *     Args:
         *         session_id: Practice session ID
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Confirmation with snapshot data
         */
        post: operations["complete_session_api_practice_sessions__session_id__complete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Mock Exam
         * @description Create a new mock SAT exam with 4 modules.
         *
         *     Args:
         *         request: Exam creation request with exam type
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Created exam with modules
         */
        post: operations["create_mock_exam_api_mock_exams_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Mock Exams
         * @description Get all mock exams for the current user.
         *
         *     Args:
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         List of user's mock exams
         */
        get: operations["list_mock_exams_api_mock_exams__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/{exam_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Mock Exam
         * @description Get a specific mock exam with all modules.
         *
         *     Args:
         *         exam_id: Mock exam ID
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Exam with all modules
         */
        get: operations["get_mock_exam_api_mock_exams__exam_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/{exam_id}/modules/{module_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Module
         * @description Start a module, setting its status and start time.
         *
         *     Args:
         *         exam_id: Mock exam ID
         *         module_id: Module ID to start
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Updated module
         */
        post: operations["start_module_api_mock_exams__exam_id__modules__module_id__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/{exam_id}/modules/{module_id}/questions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Module Questions
         * @description Get all questions for a specific module.
         *
         *     Args:
         *         exam_id: Mock exam ID
         *         module_id: Module ID
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Module with questions
         */
        get: operations["get_module_questions_api_mock_exams__exam_id__modules__module_id__questions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/{exam_id}/modules/{module_id}/questions/{question_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Submit Answer
         * @description Submit an answer for a question in a module.
         *
         *     Args:
         *         exam_id: Mock exam ID
         *         module_id: Module ID
         *         question_id: Question ID
         *         answer_data: User's answer and status
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Answer correctness and correct answer
         */
        patch: operations["submit_answer_api_mock_exams__exam_id__modules__module_id__questions__question_id__patch"];
        trace?: never;
    };
    "/api/mock-exams/{exam_id}/modules/{module_id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete Module
         * @description Complete a module and calculate score. Generates adaptive questions for next module.
         *
         *     Args:
         *         exam_id: Mock exam ID
         *         module_id: Module ID
         *         request: Completion data with time remaining
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Completed module with score
         */
        post: operations["complete_module_api_mock_exams__exam_id__modules__module_id__complete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mock-exams/{exam_id}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Exam Results
         * @description Get comprehensive results for a completed exam.
         *
         *     Args:
         *         exam_id: Mock exam ID
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Exam results with detailed breakdown
         */
        get: operations["get_exam_results_api_mock_exams__exam_id__results_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/diagnostic-test/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Diagnostic Test
         * @description Create a new diagnostic test with 40 questions.
         *
         *     Args:
         *         request: Diagnostic test creation request
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Created diagnostic test
         */
        post: operations["create_diagnostic_test_api_diagnostic_test_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/diagnostic-test/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Diagnostic Tests
         * @description Get all diagnostic tests for the current user.
         *
         *     Args:
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         List of user's diagnostic tests
         */
        get: operations["list_diagnostic_tests_api_diagnostic_test__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/diagnostic-test/{test_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Diagnostic Test
         * @description Get a specific diagnostic test with all questions.
         *
         *     Args:
         *         test_id: Diagnostic test ID
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Test with all questions
         */
        get: operations["get_diagnostic_test_api_diagnostic_test__test_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/diagnostic-test/{test_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Diagnostic Test
         * @description Start a diagnostic test, setting its status and start time.
         *
         *     Args:
         *         test_id: Diagnostic test ID to start
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Updated test
         */
        post: operations["start_diagnostic_test_api_diagnostic_test__test_id__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/diagnostic-test/{test_id}/questions/{question_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Submit Answer
         * @description Submit an answer for a question in a diagnostic test.
         *
         *     Args:
         *         test_id: Diagnostic test ID
         *         question_id: Question ID
         *         answer_data: User's answer and status
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Answer correctness and correct answer
         */
        patch: operations["submit_answer_api_diagnostic_test__test_id__questions__question_id__patch"];
        trace?: never;
    };
    "/api/diagnostic-test/{test_id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete Diagnostic Test
         * @description Complete a diagnostic test and initialize BKT mastery baselines.
         *
         *     Args:
         *         test_id: Diagnostic test ID
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Completion summary with mastery initialization
         */
        post: operations["complete_diagnostic_test_api_diagnostic_test__test_id__complete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/diagnostic-test/{test_id}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Diagnostic Test Results
         * @description Get comprehensive results for a completed diagnostic test.
         *
         *     Args:
         *         test_id: Diagnostic test ID
         *         user_id: User ID from authentication token
         *         db: Database client
         *
         *     Returns:
         *         Test results with mastery initialization data
         */
        get: operations["get_diagnostic_test_results_api_diagnostic_test__test_id__results_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/users/me/growth-curve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Growth Curve
         * @description Get mastery progression over time (growth curve).
         *
         *     Shows how student's mastery has improved across time.
         *     Can filter to specific skill or show overall progress.
         *
         *     Args:
         *         skill_id: Optional specific skill to track
         *         days_back: Number of days to look back (default 30)
         *         user_id: Authenticated user ID
         *         db: Database client
         *
         *     Returns:
         *         Growth curve data with timestamps and mastery values
         */
        get: operations["get_user_growth_curve_api_analytics_users_me_growth_curve_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/users/me/skill-heatmap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Skill Heatmap
         * @description Get current mastery heatmap across all skills.
         *
         *     Visual representation of student's current mastery state.
         *     Grouped by category with color-coding based on mastery level.
         *
         *     Args:
         *         user_id: Authenticated user ID
         *         db: Database client
         *
         *     Returns:
         *         Heatmap data grouped by category
         */
        get: operations["get_user_skill_heatmap_api_analytics_users_me_skill_heatmap_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/users/me/snapshots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Snapshots
         * @description Get historical performance snapshots.
         *
         *     Snapshots capture student's state at specific points in time.
         *     Useful for tracking long-term progress.
         *
         *     Args:
         *         snapshot_type: Optional filter ('session_complete', 'mock_exam', 'weekly', 'monthly')
         *         limit: Maximum number of snapshots to return
         *         user_id: Authenticated user ID
         *         db: Database client
         *
         *     Returns:
         *         List of performance snapshots
         */
        get: operations["get_user_snapshots_api_analytics_users_me_snapshots_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/snapshots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Snapshot
         * @description Manually create a performance snapshot.
         *
         *     Captures current mastery state for future comparison.
         *
         *     Args:
         *         user_id: Authenticated user ID
         *         db: Database client
         *
         *     Returns:
         *         Created snapshot
         */
        post: operations["create_snapshot_api_analytics_snapshots_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/users/me/learning-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Learning Events
         * @description Get recent learning events.
         *
         *     Events include mastery updates, achievements, and plateaus.
         *
         *     Args:
         *         event_type: Optional filter by event type
         *         limit: Maximum number of events
         *         user_id: Authenticated user ID
         *         db: Database client
         *
         *     Returns:
         *         List of learning events
         */
        get: operations["get_learning_events_api_analytics_users_me_learning_events_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/users/me/mastery/{skill_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Skill Mastery
         * @description Get detailed mastery data for a specific skill.
         *
         *     Args:
         *         skill_id: Skill/topic ID
         *         user_id: Authenticated user ID
         *         db: Database client
         *
         *     Returns:
         *         Detailed mastery record
         */
        get: operations["get_skill_mastery_api_analytics_users_me_mastery__skill_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/users/me/mastery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Masteries
         * @description Get all mastery records for current user.
         *
         *     Args:
         *         user_id: Authenticated user ID
         *         db: Database client
         *
         *     Returns:
         *         List of all skill masteries
         */
        get: operations["get_all_masteries_api_analytics_users_me_mastery_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/admin/mastery-tracking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Mastery Tracking Stats
         * @description Get mastery tracking statistics.
         *     Admin sees all users, regular users see only their own data.
         */
        get: operations["get_mastery_tracking_stats_api_analytics_admin_mastery_tracking_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/admin/confidence-timing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Confidence Timing Stats
         * @description Get confidence score and timing statistics.
         *     Admin sees all users, regular users see only their own data.
         */
        get: operations["get_confidence_timing_stats_api_analytics_admin_confidence_timing_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/admin/learning-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Learning Events Stats
         * @description Get learning events statistics grouped by event type.
         *     Admin sees all users, regular users see only their own data.
         */
        get: operations["get_learning_events_stats_api_analytics_admin_learning_events_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/admin/performance-snapshots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Performance Snapshots Overview
         * @description Get recent performance snapshots overview.
         *     Admin sees all users, regular users see only their own data.
         */
        get: operations["get_performance_snapshots_overview_api_analytics_admin_performance_snapshots_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/admin/user-progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Progress Summary
         * @description Get overall user progress summary.
         *     Admin sees all users, regular users see only their own data.
         */
        get: operations["get_user_progress_summary_api_analytics_admin_user_progress_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/admin/question-difficulty": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Question Difficulty Stats
         * @description Get question difficulty calibration statistics (IRT parameters).
         *     Admin only endpoint.
         */
        get: operations["get_question_difficulty_stats_api_analytics_admin_question_difficulty_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/admin/mock-exam-analytics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Mock Exam Analytics
         * @description Get mock exam analytics including completion rates, scores, weak topics, and stamina patterns.
         *     Admin sees all users, regular users see only their own data.
         */
        get: operations["get_mock_exam_analytics_api_analytics_admin_mock_exam_analytics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/admin/error-patterns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Error Pattern Analytics
         * @description Get error pattern analysis including cognitive blocks and plateau detection.
         *     Admin sees all users, regular users see only their own data.
         */
        get: operations["get_error_pattern_analytics_api_analytics_admin_error_patterns_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/admin/cognitive-efficiency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Cognitive Efficiency Analytics
         * @description Get cognitive efficiency metrics including time-of-day patterns and confidence calibration.
         *     Admin sees all users, regular users see only their own data.
         */
        get: operations["get_cognitive_efficiency_analytics_api_analytics_admin_cognitive_efficiency_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/learning-velocity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Learning Velocity
         * @description Get learning velocity analytics including momentum, acceleration, and trends.
         */
        get: operations["get_learning_velocity_api_analytics_learning_velocity_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/predictive-scores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Predictive Scores
         * @description Get predictive SAT score analytics with trajectory and goal tracking.
         */
        get: operations["get_predictive_scores_api_analytics_predictive_scores_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Profile
         * @description Get complete user profile including preferences, streak, stats, and recent achievements
         */
        get: operations["get_user_profile_api_profile_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update User Profile
         * @description Update user profile information
         */
        patch: operations["update_user_profile_api_profile_patch"];
        trace?: never;
    };
    "/api/profile/photo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Profile Photo
         * @description Upload user profile photo
         */
        post: operations["upload_profile_photo_api_profile_photo_post"];
        /**
         * Delete Profile Photo
         * @description Delete user profile photo
         */
        delete: operations["delete_profile_photo_api_profile_photo_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Preferences
         * @description Get user preferences
         */
        get: operations["get_user_preferences_api_preferences_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update User Preferences
         * @description Update user preferences
         */
        patch: operations["update_user_preferences_api_preferences_patch"];
        trace?: never;
    };
    "/api/achievements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Achievements
         * @description Get all user achievements
         */
        get: operations["get_user_achievements_api_achievements_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/streak": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Streak
         * @description Get user streak information
         */
        get: operations["get_user_streak_api_streak_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/streak/freeze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Freeze Streak
         * @description Freeze streak for vacation mode (max 30 days)
         */
        post: operations["freeze_streak_api_streak_freeze_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/streak/unfreeze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unfreeze Streak
         * @description Unfreeze streak (resume tracking)
         */
        post: operations["unfreeze_streak_api_streak_unfreeze_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Stats
         * @description Get aggregated user statistics
         */
        get: operations["get_user_stats_api_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/complete-onboarding": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete Onboarding
         * @description Mark user onboarding as complete
         */
        post: operations["complete_onboarding_api_complete_onboarding_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai-feedback/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Ai Feedback
         * @description Get AI-generated feedback for a practice question.
         *
         *     Args:
         *         request: Feedback request with question details and user performance
         *
         *     Returns:
         *         AI-generated feedback including explanation, hints, and learning points
         */
        post: operations["get_ai_feedback_api_ai_feedback__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AIFeedbackContent
         * @description AI-generated feedback content
         */
        AIFeedbackContent: {
            /** Explanation */
            explanation: string;
            /** Hints */
            hints: string[];
            /** Learning Points */
            learning_points: string[];
            /** Key Concepts */
            key_concepts: string[];
        };
        /**
         * AIFeedbackResponse
         * @description Response model for AI feedback
         */
        AIFeedbackResponse: {
            /**
             * Session Question Id
             * Format: uuid
             */
            session_question_id: string;
            /**
             * Question Id
             * Format: uuid
             */
            question_id: string;
            feedback: components["schemas"]["AIFeedbackContent"];
            /** Is Cached */
            is_cached: boolean;
        };
        /** Body_upload_profile_photo_api_profile_photo_post */
        Body_upload_profile_photo_api_profile_photo_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /**
         * CategoriesAndTopicsResponse
         * @description Response model for categories and topics
         */
        CategoriesAndTopicsResponse: {
            /** Math */
            math: Record<string, never>;
            /** Reading Writing */
            reading_writing: Record<string, never>;
        };
        /** CategoryPerformance */
        CategoryPerformance: {
            /** Category Name */
            category_name: string;
            /** Section */
            section: string;
            /** Total Questions */
            total_questions: number;
            /** Correct Answers */
            correct_answers: number;
            /** Percentage */
            percentage: number;
        };
        /** CompleteModuleRequest */
        CompleteModuleRequest: {
            /** Time Remaining Seconds */
            time_remaining_seconds?: number | null;
        };
        /** CreateDiagnosticTestRequest */
        CreateDiagnosticTestRequest: Record<string, never>;
        /** CreateMockExamRequest */
        CreateMockExamRequest: {
            /**
             * Exam Type
             * @default full_length
             * @enum {string}
             */
            exam_type: "full_length" | "section_only";
        };
        /**
         * DiagnosticQuestionStatus
         * @enum {string}
         */
        DiagnosticQuestionStatus: "not_started" | "answered" | "marked_for_review";
        /** DiagnosticTest */
        DiagnosticTest: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            status: components["schemas"]["DiagnosticTestStatus"];
            /** Started At */
            started_at?: string | null;
            /** Completed At */
            completed_at?: string | null;
            /**
             * Total Questions
             * @default 40
             */
            total_questions: number;
            /** Total Correct */
            total_correct?: number | null;
            /** Math Correct */
            math_correct?: number | null;
            /** Rw Correct */
            rw_correct?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** DiagnosticTestListItem */
        DiagnosticTestListItem: {
            /** Id */
            id: string;
            status: components["schemas"]["DiagnosticTestStatus"];
            /** Started At */
            started_at?: string | null;
            /** Completed At */
            completed_at?: string | null;
            /** Total Correct */
            total_correct?: number | null;
            /**
             * Total Questions
             * @default 40
             */
            total_questions: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** DiagnosticTestListResponse */
        DiagnosticTestListResponse: {
            /** Tests */
            tests: components["schemas"]["DiagnosticTestListItem"][];
            /** Total Count */
            total_count: number;
        };
        /** DiagnosticTestQuestionWithDetails */
        DiagnosticTestQuestionWithDetails: {
            /** Diagnostic Question Id */
            diagnostic_question_id: string;
            /** Question */
            question: Record<string, never>;
            /** Topic */
            topic: Record<string, never>;
            /** Section */
            section: string;
            /** Display Order */
            display_order: number;
            status: components["schemas"]["DiagnosticQuestionStatus"];
            /** User Answer */
            user_answer?: string[] | null;
            /** Is Correct */
            is_correct?: boolean | null;
            /**
             * Is Marked For Review
             * @default false
             */
            is_marked_for_review: boolean;
            /** Answered At */
            answered_at?: string | null;
        };
        /** DiagnosticTestResponse */
        DiagnosticTestResponse: {
            test: components["schemas"]["DiagnosticTest"];
            /** Questions */
            questions: components["schemas"]["DiagnosticTestQuestionWithDetails"][];
            /** Total Questions */
            total_questions: number;
        };
        /** DiagnosticTestResultsResponse */
        DiagnosticTestResultsResponse: {
            test: components["schemas"]["DiagnosticTest"];
            /** Total Correct */
            total_correct: number;
            /** Total Questions */
            total_questions: number;
            /** Overall Percentage */
            overall_percentage: number;
            /** Math Correct */
            math_correct: number;
            /** Math Total */
            math_total: number;
            /** Math Percentage */
            math_percentage: number;
            /** Rw Correct */
            rw_correct: number;
            /** Rw Total */
            rw_total: number;
            /** Rw Percentage */
            rw_percentage: number;
            /** Topic Mastery Initialized */
            topic_mastery_initialized: components["schemas"]["TopicMasteryInit"][];
            /** Questions */
            questions: components["schemas"]["DiagnosticTestQuestionWithDetails"][];
        };
        /**
         * DiagnosticTestStatus
         * @enum {string}
         */
        DiagnosticTestStatus: "not_started" | "in_progress" | "completed";
        /**
         * GrowthCurveResponse
         * @description Response model for growth curve data
         */
        GrowthCurveResponse: {
            /** Data */
            data: Record<string, never>[];
            /** Skill Id */
            skill_id?: string | null;
            /** Days Covered */
            days_covered: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * LearningEventsResponse
         * @description Response model for learning events
         */
        LearningEventsResponse: {
            /** Events */
            events: Record<string, never>[];
            /** Total Count */
            total_count: number;
        };
        /** MockExam */
        MockExam: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            /** Exam Type */
            exam_type: string;
            status: components["schemas"]["MockExamStatus"];
            /** Started At */
            started_at?: string | null;
            /** Completed At */
            completed_at?: string | null;
            /** Total Score */
            total_score?: number | null;
            /** Math Score */
            math_score?: number | null;
            /** Rw Score */
            rw_score?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** MockExamListItem */
        MockExamListItem: {
            /** Id */
            id: string;
            /** Exam Type */
            exam_type: string;
            status: components["schemas"]["MockExamStatus"];
            /** Started At */
            started_at?: string | null;
            /** Completed At */
            completed_at?: string | null;
            /** Total Score */
            total_score?: number | null;
            /** Math Score */
            math_score?: number | null;
            /** Rw Score */
            rw_score?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** MockExamListResponse */
        MockExamListResponse: {
            /** Exams */
            exams: components["schemas"]["MockExamListItem"][];
            /** Total Count */
            total_count: number;
        };
        /** MockExamModule */
        MockExamModule: {
            /** Id */
            id: string;
            /** Exam Id */
            exam_id: string;
            module_type: components["schemas"]["ModuleType"];
            /** Module Number */
            module_number: number;
            /**
             * Time Limit Minutes
             * @default 32
             */
            time_limit_minutes: number;
            status: components["schemas"]["ModuleStatus"];
            /** Started At */
            started_at?: string | null;
            /** Completed At */
            completed_at?: string | null;
            /** Time Remaining Seconds */
            time_remaining_seconds?: number | null;
            /** Raw Score */
            raw_score?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** MockExamQuestionWithDetails */
        MockExamQuestionWithDetails: {
            /** Mock Question Id */
            mock_question_id: string;
            /** Question */
            question: Record<string, never>;
            /** Topic */
            topic: Record<string, never>;
            /** Display Order */
            display_order: number;
            status: components["schemas"]["MockQuestionStatus"];
            /** User Answer */
            user_answer?: string[] | null;
            /** Is Correct */
            is_correct?: boolean | null;
            /**
             * Is Marked For Review
             * @default false
             */
            is_marked_for_review: boolean;
            /** Answered At */
            answered_at?: string | null;
        };
        /** MockExamResponse */
        MockExamResponse: {
            exam: components["schemas"]["MockExam"];
            /** Modules */
            modules: components["schemas"]["MockExamModule"][];
        };
        /** MockExamResultsResponse */
        MockExamResultsResponse: {
            exam: components["schemas"]["MockExam"];
            /** Modules */
            modules: components["schemas"]["ModuleResultDetail"][];
            /** Category Performance */
            category_performance: components["schemas"]["CategoryPerformance"][];
            /** Total Questions */
            total_questions: number;
            /** Total Correct */
            total_correct: number;
            /** Overall Percentage */
            overall_percentage: number;
        };
        /**
         * MockExamStatus
         * @enum {string}
         */
        MockExamStatus: "not_started" | "in_progress" | "completed" | "abandoned";
        /**
         * MockQuestionStatus
         * @enum {string}
         */
        MockQuestionStatus: "not_started" | "in_progress" | "answered" | "marked_for_review";
        /** ModuleQuestionsResponse */
        ModuleQuestionsResponse: {
            module: components["schemas"]["MockExamModule"];
            /** Questions */
            questions: components["schemas"]["MockExamQuestionWithDetails"][];
            /** Total Questions */
            total_questions: number;
        };
        /** ModuleResultDetail */
        ModuleResultDetail: {
            module_type: components["schemas"]["ModuleType"];
            /** Module Number */
            module_number: number;
            /** Raw Score */
            raw_score: number;
            /** Total Questions */
            total_questions: number;
            /** Correct Count */
            correct_count: number;
            /** Questions */
            questions: components["schemas"]["QuestionResultDetail"][];
        };
        /**
         * ModuleStatus
         * @enum {string}
         */
        ModuleStatus: "not_started" | "in_progress" | "completed";
        /**
         * ModuleType
         * @enum {string}
         */
        ModuleType: "math_module_1" | "math_module_2" | "rw_module_1" | "rw_module_2";
        /**
         * PracticeSession
         * @description Practice session model
         */
        PracticeSession: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Study Plan Id
             * Format: uuid
             */
            study_plan_id: string;
            /**
             * Scheduled Date
             * Format: date
             */
            scheduled_date: string;
            /** Session Number */
            session_number: number;
            /** Status */
            status: string;
            /** Started At */
            started_at?: string | null;
            /** Completed At */
            completed_at?: string | null;
            /** Created At */
            created_at?: string | null;
            /** Updated At */
            updated_at?: string | null;
            /**
             * Topics
             * @default []
             */
            topics: components["schemas"]["SessionTopic"][];
            /**
             * Total Questions
             * @default 0
             */
            total_questions: number | null;
            /**
             * Completed Questions
             * @default 0
             */
            completed_questions: number | null;
        };
        /**
         * ProfileResponse
         * @description Complete profile response with all related data
         */
        ProfileResponse: {
            profile: components["schemas"]["UserProfile"];
            preferences?: components["schemas"]["UserPreferences"] | null;
            streak?: components["schemas"]["UserStreak"] | null;
            stats?: components["schemas"]["UserProfileStats"] | null;
            /**
             * Recent Achievements
             * @default []
             */
            recent_achievements: components["schemas"]["UserAchievement"][];
        };
        /**
         * Question
         * @description Question model
         */
        Question: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Stimulus */
            stimulus?: string | null;
            /** Stem */
            stem: string;
            /** Difficulty */
            difficulty: string;
            /** Question Type */
            question_type: string;
            /** Answer Options */
            answer_options?: Record<string, never> | unknown[] | null;
            /** Correct Answer */
            correct_answer?: string[] | null;
            /** Acceptable Answers */
            acceptable_answers?: Record<string, never> | unknown[] | null;
            /** Rationale */
            rationale?: string | null;
            /** Difficulty Score */
            difficulty_score?: number | null;
            /** Module */
            module?: string | null;
            /** Topic Id */
            topic_id?: string | null;
            /** External Id */
            external_id?: string | null;
            /** Source Uid */
            source_uid?: string | null;
            /** Is Active */
            is_active?: boolean | null;
            /** Created At */
            created_at?: string | null;
            /** Updated At */
            updated_at?: string | null;
        };
        /** QuestionResultDetail */
        QuestionResultDetail: {
            /** Question Id */
            question_id: string;
            /** Topic Name */
            topic_name: string;
            /** Category Name */
            category_name: string;
            /** Difficulty */
            difficulty: string;
            /** Is Correct */
            is_correct: boolean | null;
            /** User Answer */
            user_answer: string[] | null;
            /** Correct Answer */
            correct_answer: string[];
            /** Question Type */
            question_type: string;
        };
        /**
         * SessionQuestion
         * @description Session question with details
         */
        SessionQuestion: {
            /**
             * Session Question Id
             * Format: uuid
             */
            session_question_id: string;
            question: components["schemas"]["Question"];
            topic: components["schemas"]["Topic"];
            /** Status */
            status: string;
            /** Display Order */
            display_order: number;
            /** User Answer */
            user_answer?: string[] | null;
            /** Started At */
            started_at?: string | null;
            /** Answered At */
            answered_at?: string | null;
        };
        /**
         * SessionQuestionsResponse
         * @description Response model for session questions
         */
        SessionQuestionsResponse: {
            session: components["schemas"]["PracticeSession"];
            /** Questions */
            questions: components["schemas"]["SessionQuestion"][];
            /** Total Questions */
            total_questions: number;
        };
        /**
         * SessionTopic
         * @description Session topic with question count
         */
        SessionTopic: {
            /**
             * Topic Id
             * Format: uuid
             */
            topic_id: string;
            /** Topic Name */
            topic_name: string;
            /** Num Questions */
            num_questions: number;
        };
        /** SignInRequest */
        SignInRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /** SignUpRequest */
        SignUpRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /**
         * SkillHeatmapResponse
         * @description Response model for skill mastery heatmap
         */
        SkillHeatmapResponse: {
            /** Heatmap */
            heatmap: Record<string, never>;
            /** Total Skills */
            total_skills: number;
            /** Avg Mastery */
            avg_mastery: number;
        };
        /**
         * SnapshotResponse
         * @description Response model for performance snapshot
         */
        SnapshotResponse: {
            /** Snapshots */
            snapshots: Record<string, never>[];
            /** Total Count */
            total_count: number;
        };
        /**
         * StudyPlan
         * @description Complete study plan model
         */
        StudyPlan: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /**
             * Start Date
             * Format: date
             */
            start_date: string;
            /**
             * Test Date
             * Format: date
             */
            test_date: string;
            /** Current Math Score */
            current_math_score: number;
            /** Target Math Score */
            target_math_score: number;
            /** Current Rw Score */
            current_rw_score: number;
            /** Target Rw Score */
            target_rw_score: number;
            /** Is Active */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
            /**
             * Sessions
             * @default []
             */
            sessions: components["schemas"]["PracticeSession"][];
        };
        /**
         * StudyPlanCreate
         * @description Request model for creating a study plan
         * @example {
         *       "current_math_score": 500,
         *       "current_rw_score": 520,
         *       "target_math_score": 700,
         *       "target_rw_score": 680,
         *       "test_date": "2025-05-01"
         *     }
         */
        StudyPlanCreate: {
            /**
             * Current Math Score
             * @description Current Math score (200-800)
             */
            current_math_score: number;
            /**
             * Target Math Score
             * @description Target Math score (200-800)
             */
            target_math_score: number;
            /**
             * Current Rw Score
             * @description Current Reading/Writing score (200-800)
             */
            current_rw_score: number;
            /**
             * Target Rw Score
             * @description Target Reading/Writing score (200-800)
             */
            target_rw_score: number;
            /**
             * Test Date
             * Format: date
             * @description SAT test date
             */
            test_date: string;
        };
        /**
         * StudyPlanResponse
         * @description Response model for study plan
         */
        StudyPlanResponse: {
            study_plan: components["schemas"]["StudyPlan"];
            /** Total Sessions */
            total_sessions: number;
            /** Total Days */
            total_days: number;
        };
        /** SubmitAnswerRequest */
        SubmitAnswerRequest: {
            /** User Answer */
            user_answer: string[];
            /**
             * Status
             * @default answered
             */
            status: string;
            /** Confidence Score */
            confidence_score?: number | null;
            /** Time Spent Seconds */
            time_spent_seconds?: number | null;
        };
        /**
         * SubmitAnswerResponse
         * @description Shared response model for submitting an answer
         */
        SubmitAnswerResponse: {
            /** Is Correct */
            is_correct: boolean;
            /** Correct Answer */
            correct_answer: string[];
            /** Question Id */
            question_id: string;
            /** Junction Question Id */
            junction_question_id: string;
            /** Mastery Update */
            mastery_update?: Record<string, never> | null;
        };
        /** SubmitDiagnosticAnswerRequest */
        SubmitDiagnosticAnswerRequest: {
            /** User Answer */
            user_answer: string[];
            /** @default answered */
            status: components["schemas"]["DiagnosticQuestionStatus"];
            /**
             * Is Marked For Review
             * @default false
             */
            is_marked_for_review: boolean;
        };
        /** SubmitModuleAnswerRequest */
        SubmitModuleAnswerRequest: {
            /** User Answer */
            user_answer: string[];
            /** @default answered */
            status: components["schemas"]["MockQuestionStatus"];
            /**
             * Is Marked For Review
             * @default false
             */
            is_marked_for_review: boolean;
        };
        /**
         * Topic
         * @description Topic model
         */
        Topic: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Category Id
             * Format: uuid
             */
            category_id: string;
            /** Weight In Category */
            weight_in_category: number;
            /** Created At */
            created_at?: string | null;
            /** Updated At */
            updated_at?: string | null;
        };
        /** TopicMasteryInit */
        TopicMasteryInit: {
            /** Topic Id */
            topic_id: string;
            /** Topic Name */
            topic_name: string;
            /** Initial Mastery */
            initial_mastery: number;
            /** Questions Answered */
            questions_answered: number;
            /** Correct Answers */
            correct_answers: number;
        };
        /**
         * UserAchievement
         * @description User achievement model
         */
        UserAchievement: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /** Achievement Type */
            achievement_type: string;
            /** Achievement Name */
            achievement_name: string;
            /** Achievement Description */
            achievement_description?: string | null;
            /** Achievement Icon */
            achievement_icon?: string | null;
            /**
             * Unlocked At
             * Format: date-time
             */
            unlocked_at: string;
            /** Metadata */
            metadata?: Record<string, never>;
        };
        /**
         * UserPreferences
         * @description User preferences model
         */
        UserPreferences: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /**
             * Theme
             * @default light
             */
            theme: string;
            /**
             * Font Size
             * @default normal
             */
            font_size: string;
            /**
             * Reduce Animations
             * @default false
             */
            reduce_animations: boolean;
            /**
             * Preferred Study Time
             * @default evening
             */
            preferred_study_time: string;
            /**
             * Session Length Preference
             * @default 30
             */
            session_length_preference: number;
            /**
             * Learning Style
             * @default balanced
             */
            learning_style: string;
            /**
             * Difficulty Adaptation
             * @default balanced
             */
            difficulty_adaptation: string;
            /** Email Notifications */
            email_notifications?: {
                [key: string]: boolean;
            };
            /** Push Notifications */
            push_notifications?: {
                [key: string]: boolean;
            };
            /**
             * Profile Visibility
             * @default private
             */
            profile_visibility: string;
            /**
             * Show On Leaderboard
             * @default false
             */
            show_on_leaderboard: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
        };
        /**
         * UserPreferencesUpdate
         * @description Model for updating user preferences
         */
        UserPreferencesUpdate: {
            /** Theme */
            theme?: string | null;
            /** Font Size */
            font_size?: string | null;
            /** Reduce Animations */
            reduce_animations?: boolean | null;
            /** Preferred Study Time */
            preferred_study_time?: string | null;
            /** Session Length Preference */
            session_length_preference?: number | null;
            /** Learning Style */
            learning_style?: string | null;
            /** Difficulty Adaptation */
            difficulty_adaptation?: string | null;
            /** Email Notifications */
            email_notifications?: {
                [key: string]: boolean;
            } | null;
            /** Push Notifications */
            push_notifications?: {
                [key: string]: boolean;
            } | null;
            /** Profile Visibility */
            profile_visibility?: string | null;
            /** Show On Leaderboard */
            show_on_leaderboard?: boolean | null;
        };
        /**
         * UserProfile
         * @description Complete user profile model
         */
        UserProfile: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Name */
            name?: string | null;
            /** Profile Photo Url */
            profile_photo_url?: string | null;
            /** Grade Level */
            grade_level?: string | null;
            /** School Name */
            school_name?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            /** Parent Email */
            parent_email?: string | null;
            /**
             * Timezone
             * @default America/New_York
             */
            timezone: string;
            /** Bio */
            bio?: string | null;
            /** Study Goal */
            study_goal?: string | null;
            /**
             * Onboarding Completed
             * @default false
             */
            onboarding_completed: boolean;
            /**
             * Role
             * @default user
             */
            role: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
        };
        /**
         * UserProfileStats
         * @description Aggregated user profile statistics
         */
        UserProfileStats: {
            /**
             * Total Practice Sessions
             * @default 0
             */
            total_practice_sessions: number;
            /**
             * Total Questions Answered
             * @default 0
             */
            total_questions_answered: number;
            /**
             * Total Correct Answers
             * @default 0
             */
            total_correct_answers: number;
            /**
             * Accuracy Percentage
             * @default 0
             */
            accuracy_percentage: number;
            /**
             * Total Study Hours
             * @default 0
             */
            total_study_hours: number;
            /**
             * Average Session Duration
             * @default 0
             */
            average_session_duration: number;
            /** Current Math Score */
            current_math_score?: number | null;
            /** Target Math Score */
            target_math_score?: number | null;
            /** Current Rw Score */
            current_rw_score?: number | null;
            /** Target Rw Score */
            target_rw_score?: number | null;
            /** Days Until Test */
            days_until_test?: number | null;
            /** Improvement Math */
            improvement_math?: number | null;
            /** Improvement Rw */
            improvement_rw?: number | null;
        };
        /**
         * UserProfileUpdate
         * @description Model for updating user profile
         */
        UserProfileUpdate: {
            /** Name */
            name?: string | null;
            /** Profile Photo Url */
            profile_photo_url?: string | null;
            /** Grade Level */
            grade_level?: string | null;
            /** School Name */
            school_name?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            /** Parent Email */
            parent_email?: string | null;
            /** Timezone */
            timezone?: string | null;
            /** Bio */
            bio?: string | null;
            /** Study Goal */
            study_goal?: string | null;
        };
        /**
         * UserStreak
         * @description User streak model
         */
        UserStreak: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /**
             * Current Streak
             * @default 0
             */
            current_streak: number;
            /**
             * Longest Streak
             * @default 0
             */
            longest_streak: number;
            /** Last Study Date */
            last_study_date?: string | null;
            /** Streak Frozen Until */
            streak_frozen_until?: string | null;
            /**
             * Total Study Days
             * @default 0
             */
            total_study_days: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** AIFeedbackRequest */
        app__api__ai_feedback__AIFeedbackRequest: {
            /** Question Stem */
            question_stem: string;
            /** Question Type */
            question_type: string;
            /** Correct Answer */
            correct_answer: string[];
            /** User Answer */
            user_answer: string[];
            /** Is Correct */
            is_correct: boolean;
            /** Topic Name */
            topic_name: string;
            /** User Performance Context */
            user_performance_context: {
                [key: string]: number;
            };
        };
        /**
         * AIFeedbackRequest
         * @description Request model for AI feedback generation
         */
        app__models__study_plan__AIFeedbackRequest: {
            /** Question Ids */
            question_ids?: string[] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    sign_up_api_auth_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sign_in_api_auth_signin_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sign_out_api_auth_signout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_current_user_info_api_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    generate_study_plan_api_study_plans_generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StudyPlanCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudyPlanResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_study_plan_api_study_plans_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudyPlanResponse"];
                };
            };
        };
    };
    delete_study_plan_api_study_plans_me_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    generate_next_batch_api_study_plans_me_generate_batch_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_categories_and_topics_api_study_plans__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriesAndTopicsResponse"];
                };
            };
        };
    };
    get_session_questions_api_practice_sessions__session_id__questions_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionQuestionsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_answer_api_practice_sessions__session_id__questions__question_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
                question_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmitAnswerRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmitAnswerResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_question_feedback_api_practice_sessions__session_id__questions__question_id__feedback_get: {
        parameters: {
            query?: {
                regenerate?: boolean;
            };
            header?: never;
            path: {
                session_id: string;
                question_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIFeedbackResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_session_feedback_api_practice_sessions__session_id__generate_feedback_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["app__models__study_plan__AIFeedbackRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIFeedbackResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    complete_session_api_practice_sessions__session_id__complete_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_mock_exam_api_mock_exams_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMockExamRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MockExamResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_mock_exams_api_mock_exams__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MockExamListResponse"];
                };
            };
        };
    };
    get_mock_exam_api_mock_exams__exam_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MockExamResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_module_api_mock_exams__exam_id__modules__module_id__start_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
                module_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_module_questions_api_mock_exams__exam_id__modules__module_id__questions_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
                module_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModuleQuestionsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_answer_api_mock_exams__exam_id__modules__module_id__questions__question_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
                module_id: string;
                question_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmitModuleAnswerRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmitAnswerResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    complete_module_api_mock_exams__exam_id__modules__module_id__complete_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
                module_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompleteModuleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_exam_results_api_mock_exams__exam_id__results_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MockExamResultsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_diagnostic_test_api_diagnostic_test_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDiagnosticTestRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_diagnostic_tests_api_diagnostic_test__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiagnosticTestListResponse"];
                };
            };
        };
    };
    get_diagnostic_test_api_diagnostic_test__test_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                test_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiagnosticTestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_diagnostic_test_api_diagnostic_test__test_id__start_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                test_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_answer_api_diagnostic_test__test_id__questions__question_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                test_id: string;
                question_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmitDiagnosticAnswerRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmitAnswerResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    complete_diagnostic_test_api_diagnostic_test__test_id__complete_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                test_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_diagnostic_test_results_api_diagnostic_test__test_id__results_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                test_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiagnosticTestResultsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_growth_curve_api_analytics_users_me_growth_curve_get: {
        parameters: {
            query?: {
                /** @description Optional skill ID to track */
                skill_id?: string | null;
                /** @description Number of days to look back */
                days_back?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GrowthCurveResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_skill_heatmap_api_analytics_users_me_skill_heatmap_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SkillHeatmapResponse"];
                };
            };
        };
    };
    get_user_snapshots_api_analytics_users_me_snapshots_get: {
        parameters: {
            query?: {
                /** @description Filter by snapshot type */
                snapshot_type?: string | null;
                /** @description Maximum number of snapshots */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SnapshotResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_snapshot_api_analytics_snapshots_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_learning_events_api_analytics_users_me_learning_events_get: {
        parameters: {
            query?: {
                /** @description Filter by event type */
                event_type?: string | null;
                /** @description Maximum number of events */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LearningEventsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_skill_mastery_api_analytics_users_me_mastery__skill_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skill_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_masteries_api_analytics_users_me_mastery_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_mastery_tracking_stats_api_analytics_admin_mastery_tracking_get: {
        parameters: {
            query?: {
                /** @description Number of records to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_confidence_timing_stats_api_analytics_admin_confidence_timing_get: {
        parameters: {
            query?: {
                /** @description Number of records to analyze */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_learning_events_stats_api_analytics_admin_learning_events_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_performance_snapshots_overview_api_analytics_admin_performance_snapshots_get: {
        parameters: {
            query?: {
                /** @description Number of snapshots to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_progress_summary_api_analytics_admin_user_progress_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_question_difficulty_stats_api_analytics_admin_question_difficulty_get: {
        parameters: {
            query?: {
                /** @description Number of questions to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_mock_exam_analytics_api_analytics_admin_mock_exam_analytics_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_error_pattern_analytics_api_analytics_admin_error_patterns_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_cognitive_efficiency_analytics_api_analytics_admin_cognitive_efficiency_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_learning_velocity_api_analytics_learning_velocity_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_predictive_scores_api_analytics_predictive_scores_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_profile_api_profile_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileResponse"];
                };
            };
        };
    };
    update_user_profile_api_profile_patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserProfileUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_profile_photo_api_profile_photo_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_profile_photo_api_profile_photo_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_profile_photo_api_profile_photo_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_preferences_api_preferences_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreferences"];
                };
            };
        };
    };
    update_user_preferences_api_preferences_patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPreferencesUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreferences"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_achievements_api_achievements_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAchievement"][];
                };
            };
        };
    };
    get_user_streak_api_streak_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserStreak"];
                };
            };
        };
    };
    freeze_streak_api_streak_freeze_post: {
        parameters: {
            query?: {
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unfreeze_streak_api_streak_unfreeze_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_stats_api_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileStats"];
                };
            };
        };
    };
    complete_onboarding_api_complete_onboarding_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_ai_feedback_api_ai_feedback__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["app__api__ai_feedback__AIFeedbackRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
